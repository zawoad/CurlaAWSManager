/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package curlaawsmanager.edu.cis.uab;

import curlaawsmanager.edu.cis.uab.awshelper.SQSHelper;
import curlaawsmanager.edu.cis.uab.dal.Ec2QueueRelationHandler;
import curlaawsmanager.edu.cis.uab.handler.SQSFormHandler;
import curlaawsmanager.edu.cis.uab.util.ArrayListTableModel;
import curlaawsmanager.edu.cis.uab.util.Utility;
import curlaawsmanager.edu.cis.uab.util.ZLogger;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JFrame;

/**
 *
 * @author zawoad
 */
public class QueueManager extends javax.swing.JDialog {

    /**
     * Creates new form QueueManager
     */
    public QueueManager(JFrame parent) {
        super(parent, true);
        setTitle("Fetcher and Uploader Queue Manager");
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblFetcheQueue = new javax.swing.JTable();
        jbtLoadFetcherQueueList = new javax.swing.JButton();
        jbtRemoveFQueue = new javax.swing.JButton();
        jbtClearFQueue = new javax.swing.JButton();
        jbtClearAllFQueue = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnCreateQueue = new javax.swing.JButton();
        txtFQStart = new javax.swing.JTextField();
        txtFQEnd = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jbtRemoveAllFqueue = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblUpQueue = new javax.swing.JTable();
        jbtLoadUpQueueList = new javax.swing.JButton();
        jbtRemoveUQueue = new javax.swing.JButton();
        jbtClearUQueue = new javax.swing.JButton();
        jbtClearAllUQueue = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        btnCreateUpQueue = new javax.swing.JButton();
        txtUQStart = new javax.swing.JTextField();
        txtUQEnd = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jbtRemoveAllUpQueue = new javax.swing.JButton();
        jbtCance = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Manage Fetcher Queues"));

        jtblFetcheQueue.setModel(fetcherQueueTableModel);
        jScrollPane1.setViewportView(jtblFetcheQueue);

        jbtLoadFetcherQueueList.setText("Load Queue List");
        jbtLoadFetcherQueueList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtLoadFetcherQueueListActionPerformed(evt);
            }
        });

        jbtRemoveFQueue.setText("Remove Queue");
        jbtRemoveFQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRemoveFQueueActionPerformed(evt);
            }
        });

        jbtClearFQueue.setText("Clear Queue");
        jbtClearFQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtClearFQueueActionPerformed(evt);
            }
        });

        jbtClearAllFQueue.setText("Clear All Queues");
        jbtClearAllFQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtClearAllFQueueActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCreateQueue.setText("Create Fetcher Queue");
        btnCreateQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateQueueActionPerformed(evt);
            }
        });

        txtFQStart.setText("0");
        txtFQStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFQStartActionPerformed(evt);
            }
        });

        txtFQEnd.setText("0");

        jLabel1.setText("Qqeue Range");

        jLabel2.setText("to");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnCreateQueue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFQStart, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFQEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 12, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFQStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFQEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCreateQueue)
                .addContainerGap())
        );

        jbtRemoveAllFqueue.setText("Remove All Queues");
        jbtRemoveAllFqueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRemoveAllFqueueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jbtClearAllFQueue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtClearFQueue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtLoadFetcherQueueList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtRemoveFQueue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtRemoveAllFqueue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtLoadFetcherQueueList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtClearFQueue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtClearAllFQueue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtRemoveFQueue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtRemoveAllFqueue)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Manage Uploader SQS"));

        jtblUpQueue.setModel(uploaderQueueTableModel);
        jScrollPane2.setViewportView(jtblUpQueue);

        jbtLoadUpQueueList.setText("Load Queue List");
        jbtLoadUpQueueList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtLoadUpQueueListActionPerformed(evt);
            }
        });

        jbtRemoveUQueue.setText("Remove Queue");
        jbtRemoveUQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRemoveUQueueActionPerformed(evt);
            }
        });

        jbtClearUQueue.setText("Clear Queue");
        jbtClearUQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtClearUQueueActionPerformed(evt);
            }
        });

        jbtClearAllUQueue.setText("Clear All Queues");
        jbtClearAllUQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtClearAllUQueueActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCreateUpQueue.setText("Create Uploader Queue");
        btnCreateUpQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateUpQueueActionPerformed(evt);
            }
        });

        txtUQStart.setText("0");
        txtUQStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUQStartActionPerformed(evt);
            }
        });

        txtUQEnd.setText("0");

        jLabel3.setText("Qqeue Range");

        jLabel4.setText("to");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(btnCreateUpQueue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUQStart, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUQEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 12, Short.MAX_VALUE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUQStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUQEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCreateUpQueue)
                .addGap(12, 12, 12))
        );

        jbtRemoveAllUpQueue.setText("Remove All Queues");
        jbtRemoveAllUpQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRemoveAllUpQueueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jbtClearAllUQueue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtClearUQueue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtLoadUpQueueList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtRemoveUQueue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtRemoveAllUpQueue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtLoadUpQueueList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtClearUQueue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtClearAllUQueue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtRemoveUQueue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtRemoveAllUpQueue)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jbtCance.setText("Cancel");
        jbtCance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtCanceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(927, Short.MAX_VALUE)
                .addComponent(jbtCance, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(551, Short.MAX_VALUE)
                .addComponent(jbtCance)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(17, 17, 17)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap(48, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtLoadFetcherQueueListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtLoadFetcherQueueListActionPerformed
        // TODO add your handling code here:
        fetcherQueueTableModel.build(SQSFormHandler.getQueueTableHeader(), SQSFormHandler.getAllFetcherQueue());
    }//GEN-LAST:event_jbtLoadFetcherQueueListActionPerformed

    private void jbtRemoveFQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRemoveFQueueActionPerformed
        // TODO add your handling code here:
        String queueName = Utility.getSelectedValueFromTable(fetcherQueueTableModel, jtblFetcheQueue, 0);
        if(queueName != null && !queueName.isEmpty())
        {
            try {
                sqsHelper.deleteQueuByName(queueName);
                ec2Dbhandler.removeFetcherQueue(queueName);
                ZLogger.d(queueName+" is removed!");
            }
            catch (SQLException ex) {
                ex.printStackTrace();
                ZLogger.e(ex.getLocalizedMessage());
            }
            catch(Exception ex)
            {
                ex.printStackTrace();
                ZLogger.e(ex.getLocalizedMessage());
            }
        }
        else
        {
            ZLogger.msgOnDialog("No Queue is selected!!", "Error in Queue Remove Operation");
        }
    }//GEN-LAST:event_jbtRemoveFQueueActionPerformed

    private void jbtClearFQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtClearFQueueActionPerformed
        //SQSHelper.SQSInstance().clearQueuByName("url-fetcher-1");
        String queueName = Utility.getSelectedValueFromTable(fetcherQueueTableModel, jtblFetcheQueue, 0);
        if(queueName != null || !queueName.isEmpty())
        {
            sqsHelper.clearQueuByName(queueName);
            ZLogger.d(queueName+ " is cleared.");
        }
    }//GEN-LAST:event_jbtClearFQueueActionPerformed

    private void jbtClearAllFQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtClearAllFQueueActionPerformed
        // TODO add your handling code here:
        sqsHelper.clearQueueList(sqsHelper.getFetcherQueueURLList());
        ZLogger.d("All fetcher queues are cleared.");
    }//GEN-LAST:event_jbtClearAllFQueueActionPerformed

    private void btnCreateQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateQueueActionPerformed
        // TODO add your handling code here:
        try{
            int start = Integer.parseInt(txtFQStart.getText());
            int end = Integer.parseInt(txtFQEnd.getText());
            SQSFormHandler.createFetcherQueuesWithRange(start, end);
            fetcherQueueTableModel.build(SQSFormHandler.getQueueTableHeader(), SQSFormHandler.getAllFetcherQueue());
        }
        catch(NumberFormatException ne)
        {
            System.out.println("satrt and end must be number");
        }
    }//GEN-LAST:event_btnCreateQueueActionPerformed

    private void txtFQStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFQStartActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFQStartActionPerformed

    private void jbtLoadUpQueueListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtLoadUpQueueListActionPerformed
        // TODO add your handling code here:
        uploaderQueueTableModel.build(SQSFormHandler.getQueueTableHeader(), SQSFormHandler.getAllUploaderQueue());
    }//GEN-LAST:event_jbtLoadUpQueueListActionPerformed

    private void jbtRemoveUQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRemoveUQueueActionPerformed
        // TODO add your handling code here:
        String queueName = Utility.getSelectedValueFromTable(uploaderQueueTableModel, jtblUpQueue, 0);
        if(queueName != null || !queueName.isEmpty())
        {
            sqsHelper.deleteQueuByName(queueName);
        }
    }//GEN-LAST:event_jbtRemoveUQueueActionPerformed

    private void jbtClearUQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtClearUQueueActionPerformed
        // TODO add your handling code here:
        String queueName = Utility.getSelectedValueFromTable(uploaderQueueTableModel, jtblUpQueue, 0);
        if(queueName != null || !queueName.isEmpty())
        {
            sqsHelper.clearQueuByName(queueName);
        }
    }//GEN-LAST:event_jbtClearUQueueActionPerformed

    private void jbtClearAllUQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtClearAllUQueueActionPerformed
        // TODO add your handling code here:
        sqsHelper.clearQueueList(sqsHelper.getUploaderQueueURLList());
        uploaderQueueTableModel.clearTable();
    }//GEN-LAST:event_jbtClearAllUQueueActionPerformed

    private void btnCreateUpQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUpQueueActionPerformed
        // TODO add your handling code here:
        try{
            int start = Integer.parseInt(txtUQStart.getText());
            int end = Integer.parseInt(txtUQEnd.getText());
            SQSFormHandler.createUploaderQueuesWithRange(start, end);
            uploaderQueueTableModel.build(SQSFormHandler.getQueueTableHeader(), SQSFormHandler.getAllUploaderQueue());
        }
        catch(NumberFormatException ne)
        {
            System.out.println("satrt and end must be number");
        }
    }//GEN-LAST:event_btnCreateUpQueueActionPerformed

    private void txtUQStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUQStartActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUQStartActionPerformed

    private void jbtCanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtCanceActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jbtCanceActionPerformed

    private void jbtRemoveAllFqueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRemoveAllFqueueActionPerformed
        try {
            // TODO add your handling code here:
            sqsHelper.removeQueueList(sqsHelper.getFetcherQueueURLList());
            ec2Dbhandler.removeAllFetcherQueue();
            ZLogger.d("All fetcher queues are removed.");
        } catch (SQLException ex) {
            ZLogger.e(ex.getLocalizedMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jbtRemoveAllFqueueActionPerformed

    private void jbtRemoveAllUpQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRemoveAllUpQueueActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            sqsHelper.removeQueueList(sqsHelper.getUploaderQueueURLList());
            ec2Dbhandler.removeAllUploaderQueue();
            ZLogger.d("All uploader queues are removed.");
        } catch (SQLException ex) {
            ZLogger.e(ex.getLocalizedMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jbtRemoveAllUpQueueActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateQueue;
    private javax.swing.JButton btnCreateUpQueue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtCance;
    private javax.swing.JButton jbtClearAllFQueue;
    private javax.swing.JButton jbtClearAllUQueue;
    private javax.swing.JButton jbtClearFQueue;
    private javax.swing.JButton jbtClearUQueue;
    private javax.swing.JButton jbtLoadFetcherQueueList;
    private javax.swing.JButton jbtLoadUpQueueList;
    private javax.swing.JButton jbtRemoveAllFqueue;
    private javax.swing.JButton jbtRemoveAllUpQueue;
    private javax.swing.JButton jbtRemoveFQueue;
    private javax.swing.JButton jbtRemoveUQueue;
    private javax.swing.JTable jtblFetcheQueue;
    private ArrayListTableModel fetcherQueueTableModel = new ArrayListTableModel(SQSFormHandler.getQueueTableHeader(), new ArrayList<Object[]>());
    private javax.swing.JTable jtblUpQueue;
    private ArrayListTableModel uploaderQueueTableModel = new ArrayListTableModel(SQSFormHandler.getQueueTableHeader(), new ArrayList<Object[]>());
    private javax.swing.JTextField txtFQEnd;
    private javax.swing.JTextField txtFQStart;
    private javax.swing.JTextField txtUQEnd;
    private javax.swing.JTextField txtUQStart;
    // End of variables declaration//GEN-END:variables
    private SQSHelper sqsHelper = SQSHelper.SQSInstance();
    private Ec2QueueRelationHandler ec2Dbhandler = new Ec2QueueRelationHandler();
    
}
